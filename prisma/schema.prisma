generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Tenant {
  id                   String              @id @default(uuid())
  name                 String
  slug                 String              @unique
  domain               String?             @unique
  logo                 String?
  primaryColor         String?
  secondaryColor       String?
  planType             PlanType            @default(BASIC)
  status               TenantStatus        @default(ACTIVE)
  isTrialPeriod        Boolean             @default(true)
  trialEndsAt          DateTime?
  stripeCustomerId     String?             @unique
  stripeSubscriptionId String?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  appointments         Appointment[]
  cashDrawers          CashDrawer[]
  inventoryItems       InventoryItem[]
  InventoryMovement    InventoryMovement[]
  medicalHistories     MedicalHistory[]
  medicalOrders        MedicalOrder[]
  pets                 Pet[]
  reminders            Reminder[]
  roles                Role[]
  sales                Sale[]
  services             Service[]
  staff                Staff[]
  tenantApiKeys        TenantApiKey[]
  tenantInvitations    TenantInvitation[]
  tenantSettings       TenantSettings?
  tenantSubscription   TenantSubscription?
  tenantUsageStats     TenantUsageStats?
  treatmentRecords     TreatmentRecord[]
  treatmentSchedules   TreatmentSchedule[]
  users                User[]

  @@index([status])
  @@index([slug])
  @@index([domain])
}

model Plan {
  id                  String               @id @default(uuid())
  key                 String               @unique
  name                String
  description         String?
  monthlyPrice        Decimal
  annualPrice         Decimal
  features            Json
  maxUsers            Int
  maxPets             Int
  storageGB           Int
  isRecommended       Boolean              @default(false)
  isActive            Boolean              @default(true)
  isMvp               Boolean              @default(true)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  tenantSubscriptions TenantSubscription[]
}

model User {
  id                     String         @id
  tenantId               String?
  email                  String         @unique
  firstName              String?
  lastName               String?
  name                   String?
  phone                  String?
  address                String?
  preferredContactMethod String?
  isActive               Boolean        @default(true)
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  appointments           Appointment[]
  closedDrawers          CashDrawer[]   @relation("CashDrawer_closedByToUser")
  openedDrawers          CashDrawer[]   @relation("CashDrawer_openedByToUser")
  medicalOrders          MedicalOrder[]
  pets                   Pet[]
  reminders              Reminder[]
  sales                  Sale[]
  tenant                 Tenant?        @relation(fields: [tenantId], references: [id])
  userRoles              UserRole[]

  @@index([tenantId])
  @@index([email])
}

model Role {
  id        String     @id @default(uuid())
  tenantId  String?
  key       String
  name      String
  isSystem  Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  tenant    Tenant?    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userRoles UserRole[]

  @@unique([tenantId, key])
}

model UserRole {
  id     String @id @default(uuid())
  userId String
  roleId String
  role   Role   @relation(fields: [roleId], references: [id])
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
}

model Pet {
  id                 String              @id @default(uuid())
  tenantId           String
  userId             String
  internalId         String?
  name               String
  species            String
  breed              String
  dateOfBirth        DateTime
  gender             String
  weight             Decimal?
  weightUnit         String?
  microchipNumber    String?
  isNeutered         Boolean             @default(false)
  isDeceased         Boolean             @default(false)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  appointments       Appointment[]
  medicalHistories   MedicalHistory[]
  medicalOrders      MedicalOrder[]
  tenant             Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user               User                @relation(fields: [userId], references: [id])
  reminders          Reminder[]
  sales              Sale[]
  treatmentRecords   TreatmentRecord[]
  treatmentSchedules TreatmentSchedule[]

  @@index([tenantId])
  @@index([userId])
  @@index([name])
  @@index([tenantId, userId])
}

model MedicalHistory {
  id             String        @id @default(uuid())
  tenantId       String
  petId          String
  visitDate      DateTime
  reasonForVisit String
  diagnosis      String?
  treatment      String?
  notes          String?
  medicalOrderId String?       @unique
  staffId        String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  medicalOrder   MedicalOrder? @relation(fields: [medicalOrderId], references: [id])
  pet            Pet           @relation(fields: [petId], references: [id], onDelete: Cascade)
  staff          Staff?        @relation(fields: [staffId], references: [id])
  tenant         Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([petId])
  @@index([visitDate])
  @@index([medicalOrderId])
  @@index([staffId])
}

model TreatmentRecord {
  id                 String            @id @default(uuid())
  tenantId           String
  petId              String
  treatmentType      TreatmentType
  productName        String
  administrationDate DateTime
  batchNumber        String?
  manufacturer       String?
  staffId            String?
  notes              String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  vaccineStage       VaccinationStage?
  dewormingType      DewormingType?
  pet                Pet               @relation(fields: [petId], references: [id], onDelete: Cascade)
  staff              Staff?            @relation(fields: [staffId], references: [id])
  tenant             Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([petId, administrationDate])
  @@index([treatmentType])
  @@index([staffId])
}

model TreatmentSchedule {
  id            String            @id @default(uuid())
  tenantId      String
  petId         String
  treatmentType TreatmentType
  productName   String?
  scheduledDate DateTime
  status        TreatmentStatus   @default(SCHEDULED)
  reminderSent  Boolean           @default(false)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  vaccineStage  VaccinationStage?
  dewormingType DewormingType?
  pet           Pet               @relation(fields: [petId], references: [id], onDelete: Cascade)
  tenant        Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([petId, scheduledDate, status])
  @@index([status, scheduledDate])
}

model Appointment {
  id        String            @id @default(uuid())
  tenantId  String
  userId    String
  petId     String
  staffId   String?
  dateTime  DateTime
  duration  Int?
  reason    String
  notes     String?
  status    AppointmentStatus
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  pet       Pet               @relation(fields: [petId], references: [id], onDelete: Cascade)
  staff     Staff?            @relation(fields: [staffId], references: [id])
  tenant    Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([dateTime])
  @@index([status])
  @@index([staffId])
  @@index([userId])
  @@index([petId])
}

model Reminder {
  id           String         @id @default(uuid())
  tenantId     String
  userId       String
  petId        String?
  reminderType ReminderType
  dueDate      DateTime
  message      String?
  status       ReminderStatus
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  pet          Pet?           @relation(fields: [petId], references: [id], onDelete: Cascade)
  tenant       Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([dueDate, status])
  @@index([userId])
  @@index([petId])
}

model Staff {
  id                 String              @id @default(uuid())
  tenantId           String
  userId             String?             @unique
  name               String
  position           String
  email              String?             @unique
  phone              String?
  licenseNumber      String?
  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  appointments       Appointment[]
  inventoryMovements InventoryMovement[]
  medicalHistories   MedicalHistory[]
  medicalOrders      MedicalOrder[]
  Sale               Sale[]
  tenant             Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  treatmentRecords   TreatmentRecord[]

  @@index([tenantId])
  @@index([isActive])
  @@index([email])
  @@index([userId])
}

model InventoryItem {
  id             String              @id @default(uuid())
  tenantId       String
  name           String
  category       InventoryCategory
  description    String?
  activeCompound String?
  presentation   String?
  measure        String?
  brand          String?
  quantity       Decimal             @default(0)
  minStock       Decimal?
  location       String?
  expirationDate DateTime?
  status         InventoryStatus     @default(ACTIVE)
  batchNumber    String?
  specialNotes   String?
  cost           Decimal?
  price          Decimal?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  tenant         Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  movements      InventoryMovement[]
  prescriptions  Prescription[]
  saleItems      SaleItem[]

  @@index([tenantId])
  @@index([category])
  @@index([name])
  @@index([status])
  @@index([expirationDate])
  @@index([quantity])
}

model InventoryMovement {
  id                String        @id @default(uuid())
  tenantId          String
  itemId            String
  type              MovementType
  quantity          Decimal
  date              DateTime      @default(now())
  reason            String?
  staffId           String?
  relatedRecordId   String?
  relatedRecordType String?
  notes             String?
  createdAt         DateTime      @default(now())
  item              InventoryItem @relation(fields: [itemId], references: [id])
  staff             Staff?        @relation(fields: [staffId], references: [id])
  tenant            Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([itemId, date])
  @@index([staffId])
  @@index([type])
}

model MedicalOrder {
  id             String             @id @default(uuid())
  tenantId       String
  petId          String
  staffId        String
  visitDate      DateTime
  diagnosis      String?
  treatment      String?
  notes          String?
  status         MedicalOrderStatus @default(PENDING)
  saleId         String?            @unique
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  userId         String?
  medicalHistory MedicalHistory?
  pet            Pet                @relation(fields: [petId], references: [id], onDelete: Cascade)
  sale           Sale?              @relation(fields: [saleId], references: [id])
  staff          Staff              @relation(fields: [staffId], references: [id])
  tenant         Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  User           User?              @relation(fields: [userId], references: [id])
  prescriptions  Prescription[]

  @@index([tenantId])
  @@index([petId])
  @@index([staffId])
  @@index([status])
  @@index([saleId])
}

model Prescription {
  id           String        @id @default(uuid())
  orderId      String
  productId    String
  quantity     Decimal
  unitPrice    Decimal
  dosage       String?
  frequency    String?
  duration     String?
  instructions String?
  createdAt    DateTime      @default(now())
  order        MedicalOrder  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product      InventoryItem @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model CashDrawer {
  id               String            @id @default(uuid())
  tenantId         String
  openedAt         DateTime          @default(now())
  closedAt         DateTime?
  openedById       String
  closedById       String?
  initialAmount    Decimal
  finalAmount      Decimal?
  expectedAmount   Decimal?
  difference       Decimal?
  status           DrawerStatus      @default(OPEN)
  notes            String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  closedBy         User?             @relation("CashDrawer_closedByToUser", fields: [closedById], references: [id], onDelete: Restrict)
  openedBy         User              @relation("CashDrawer_openedByToUser", fields: [openedById], references: [id])
  tenant           Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  cashTransactions CashTransaction[]

  @@index([tenantId])
  @@index([openedAt])
  @@index([status])
  @@index([openedById])
  @@index([closedById])
}

model CashTransaction {
  id          String          @id @default(uuid())
  drawerId    String
  amount      Decimal
  type        TransactionType
  description String?
  relatedId   String?
  relatedType String?
  createdAt   DateTime        @default(now())
  cashDrawer  CashDrawer      @relation(fields: [drawerId], references: [id], onDelete: Cascade)
  SalePayment SalePayment?

  @@index([drawerId])
  @@index([relatedId, relatedType])
  @@index([type])
}

model Sale {
  id             String        @id @default(uuid())
  tenantId       String
  receiptNumber  String
  date           DateTime      @default(now())
  userId         String?
  petId          String?
  staffId        String?
  subtotal       Decimal
  taxRate        Decimal?
  tax            Decimal
  discountAmount Decimal       @default(0)
  total          Decimal
  status         SaleStatus    @default(PENDING)
  notes          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  medicalOrder   MedicalOrder?
  pet            Pet?          @relation(fields: [petId], references: [id])
  staff          Staff?        @relation(fields: [staffId], references: [id])
  tenant         Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user           User?         @relation(fields: [userId], references: [id])
  saleItems      SaleItem[]
  payments       SalePayment[]

  @@unique([tenantId, receiptNumber])
  @@index([tenantId])
  @@index([date])
  @@index([status])
  @@index([userId])
  @@index([petId])
  @@index([staffId])
}

model SaleItem {
  id            String         @id @default(uuid())
  saleId        String
  itemId        String?
  serviceId     String?
  description   String
  quantity      Decimal
  unitPrice     Decimal
  discount      Decimal        @default(0)
  total         Decimal
  createdAt     DateTime       @default(now())
  inventoryItem InventoryItem? @relation(fields: [itemId], references: [id], onDelete: Restrict)
  sale          Sale           @relation(fields: [saleId], references: [id], onDelete: Cascade)
  service       Service?       @relation(fields: [serviceId], references: [id], onDelete: Restrict)

  @@index([saleId])
  @@index([itemId])
  @@index([serviceId])
}

model SalePayment {
  id                String           @id @default(uuid())
  saleId            String
  paymentMethod     PaymentMethod
  amount            Decimal
  paymentDate       DateTime         @default(now())
  transactionId     String?
  notes             String?
  cashTransactionId String?          @unique
  cashTransaction   CashTransaction? @relation(fields: [cashTransactionId], references: [id])
  sale              Sale             @relation(fields: [saleId], references: [id], onDelete: Cascade)

  @@index([saleId])
  @@index([paymentMethod])
  @@index([paymentDate])
  @@index([cashTransactionId])
}

model Service {
  id          String          @id @default(uuid())
  tenantId    String
  name        String
  description String?
  category    ServiceCategory
  price       Decimal
  duration    Int?
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  saleItems   SaleItem[]
  tenant      Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([category])
  @@index([isActive])
  @@index([name])
}

model TenantInvitation {
  id        String       @id @default(uuid())
  tenantId  String
  email     String
  roleKey   String
  token     String       @unique
  status    InviteStatus @default(PENDING)
  expiresAt DateTime
  createdAt DateTime     @default(now())
  tenant    Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([token])
  @@index([status, email])
}

model TenantSettings {
  id                   String   @id @default(uuid())
  tenantId             String   @unique
  timezone             String   @default("UTC")
  dateFormat           String   @default("DD/MM/YYYY")
  enableEmailReminders Boolean  @default(true)
  enableSmsReminders   Boolean  @default(false)
  taxRate              Decimal  @default(0)
  currencyCode         String   @default("USD")
  currencySymbol       String   @default("$")
  appointmentDuration  Int      @default(30)
  updatedAt            DateTime @updatedAt
  tenant               Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model TenantSubscription {
  id                   String             @id @default(uuid())
  tenantId             String             @unique
  planId               String
  stripeSubscriptionId String?
  status               SubscriptionStatus @default(TRIALING)
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean            @default(false)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  plan                 Plan               @relation(fields: [planId], references: [id])
  tenant               Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model TenantApiKey {
  id        String    @id @default(uuid())
  tenantId  String
  name      String
  keyPrefix String
  keyHash   String    @unique
  lastUsed  DateTime?
  expiresAt DateTime?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  tenant    Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([isActive])
}

model TenantUsageStats {
  id                String   @id @default(uuid())
  tenantId          String   @unique
  totalUsers        Int      @default(0)
  totalPets         Int      @default(0)
  totalAppointments Int      @default(0)
  totalSales        Int      @default(0)
  storageUsedBytes  BigInt   @default(0)
  lastUpdated       DateTime @updatedAt
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

enum PlanType {
  BASIC
  STANDARD
  PREMIUM
  ENTERPRISE
}

enum TenantStatus {
  ACTIVE
  SUSPENDED
  CANCELLED
  PENDING_SETUP
}

enum InviteStatus {
  PENDING
  ACCEPTED
  EXPIRED
  REVOKED
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  UNPAID
  CANCELLED
  TRIALING
  INCOMPLETE
}

enum TreatmentType {
  VACCINATION
  DEWORMING
  FLEA_TICK
  OTHER_PREVENTATIVE
}

enum TreatmentStatus {
  SCHEDULED
  COMPLETED
  OVERDUE
  CANCELLED
  SKIPPED
}

enum VaccinationStage {
  PUPPY_KITTEN
  ADULT
  SENIOR
  BOOSTER
}

enum DewormingType {
  INTERNAL
  EXTERNAL
  BOTH
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  CHECKED_IN
  IN_PROGRESS
  COMPLETED
  CANCELLED_CLIENT
  CANCELLED_CLINIC
  NO_SHOW
}

enum ReminderType {
  APPOINTMENT
  TREATMENT
  MEDICATION
  FOOD_REORDER
  CHECKUP
  BIRTHDAY
  OTHER
}

enum ReminderStatus {
  PENDING
  SENT
  ERROR
  DISMISSED
}

enum InventoryCategory {
  MEDICINE
  VACCINE
  DEWORMER
  FLEA_TICK_PREVENTION
  FOOD_PRESCRIPTION
  FOOD_REGULAR
  SUPPLEMENT
  ACCESSORY
  CONSUMABLE_CLINIC
  SURGICAL_MATERIAL
  LAB_SUPPLIES
  HYGIENE_GROOMING
  OTHER
}

enum InventoryStatus {
  ACTIVE
  INACTIVE
  LOW_STOCK
  OUT_OF_STOCK
  EXPIRED
  DISCONTINUED
}

enum MovementType {
  PURCHASE_IN
  SALE_OUT
  RETURN_IN
  ADJUSTMENT_IN
  ADJUSTMENT_OUT
  TRANSFER_IN
  TRANSFER_OUT
  EXPIRY_OUT
}

enum MedicalOrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum DrawerStatus {
  OPEN
  CLOSED
  RECONCILED
}

enum TransactionType {
  SALE_CASH
  REFUND_CASH
  DEPOSIT
  WITHDRAWAL
  ADJUSTMENT_IN
  ADJUSTMENT_OUT
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  MOBILE_PAYMENT
  CHECK
  INSURANCE
  OTHER
}

enum SaleStatus {
  PENDING
  PAID
  PARTIALLY_PAID
  COMPLETED
  CANCELLED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum ServiceCategory {
  CONSULTATION
  SURGERY
  VACCINATION
  DEWORMING
  PREVENTATIVE_CARE
  GROOMING
  BOARDING
  DENTAL_CARE
  LABORATORY_TEST
  IMAGING_RADIOLOGY
  HOSPITALIZATION
  EMERGENCY_CARE
  EUTHANASIA
  OTHER
}
