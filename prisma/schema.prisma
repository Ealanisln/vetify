generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id             String       @id @default(uuid())
  name           String
  slug           String       @unique
  domain         String?      @unique
  logo           String?
  primaryColor   String?
  secondaryColor String?
  planType       PlanType     @default(PROFESIONAL)
  status         TenantStatus @default(ACTIVE)
  isTrialPeriod  Boolean      @default(true)
  trialEndsAt    DateTime?

  // Enhanced trial tracking
  trialExtendedAt DateTime?
  trialExtendedBy String?
  gracePeriodEnds DateTime?
  lastTrialCheck  DateTime?

  // Enhanced Stripe Integration
  stripeCustomerId     String?            @unique
  stripeSubscriptionId String?            @unique
  stripeProductId      String?
  planName             String?
  subscriptionStatus   SubscriptionStatus @default(INACTIVE)
  subscriptionEndsAt   DateTime?

  // Campos para página pública
  publicPageEnabled    Boolean @default(false)
  publicDescription    String? @db.Text
  publicPhone          String?
  publicEmail          String?
  publicAddress        String? @db.Text
  publicHours          Json? // Horarios de atención
  publicServices       Json? // Servicios destacados
  publicImages         Json? // URLs de imágenes
  publicSocialMedia    Json? // Redes sociales
  publicThemeColor     String? @default("#75a99c")
  publicBookingEnabled Boolean @default(true)

  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  appointments        Appointment[]
  appointmentRequests AppointmentRequest[]
  automationLogs      AutomationLog[]
  businessHours       BusinessHours[]
  cashDrawers         CashDrawer[]
  customers           Customer[]
  inventoryItems      InventoryItem[]
  InventoryMovement   InventoryMovement[]
  medicalHistories    MedicalHistory[]
  medicalOrders       MedicalOrder[]
  pets                Pet[]
  reminders           Reminder[]
  roles               Role[]
  sales               Sale[]
  services            Service[]
  staff               Staff[]
  tenantApiKeys       TenantApiKey[]
  tenantInvitations   TenantInvitation[]
  tenantSettings      TenantSettings?
  tenantSubscription  TenantSubscription?
  tenantUsageStats    TenantUsageStats?
  treatmentRecords    TreatmentRecord[]
  treatmentSchedules  TreatmentSchedule[]
  users               User[]
  trialAccessLogs     TrialAccessLog[]

  @@index([status])
  @@index([slug])
  @@index([domain])
  @@index([trialEndsAt])
  @@index([isTrialPeriod, subscriptionStatus])
}

model Plan {
  id                  String               @id @default(uuid())
  key                 String               @unique
  name                String
  description         String?
  monthlyPrice        Decimal              @db.Decimal(10, 2)
  annualPrice         Decimal              @db.Decimal(10, 2)
  features            Json
  maxUsers            Int
  maxPets             Int
  storageGB           Int
  isRecommended       Boolean              @default(false)
  isActive            Boolean              @default(true)
  isMvp               Boolean              @default(true)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  tenantSubscriptions TenantSubscription[]
}

model User {
  id                     String           @id
  tenantId               String?
  email                  String           @unique
  firstName              String?
  lastName               String?
  name                   String?
  phone                  String?
  address                String?
  preferredContactMethod String?
  isActive               Boolean          @default(true)
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  appointments           Appointment[]
  closedDrawers          CashDrawer[]     @relation("CashDrawer_closedByToUser")
  customers              Customer[]
  openedDrawers          CashDrawer[]     @relation("CashDrawer_openedByToUser")
  medicalOrders          MedicalOrder[]
  reminders              Reminder[]
  sales                  Sale[]
  tenant                 Tenant?          @relation(fields: [tenantId], references: [id])
  userRoles              UserRole[]
  adminAuditLogs         AdminAuditLog[]
  setupTokens            SetupToken[]
  trialAccessLogs        TrialAccessLog[]

  @@index([tenantId])
  @@index([email])
}

model Role {
  id        String     @id @default(uuid())
  tenantId  String?
  key       String
  name      String
  isSystem  Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  tenant    Tenant?    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userRoles UserRole[]

  @@unique([tenantId, key])
}

model UserRole {
  id     String @id @default(uuid())
  userId String
  roleId String
  role   Role   @relation(fields: [roleId], references: [id])
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
}

model Customer {
  id                     String    @id @default(uuid())
  tenantId               String
  email                  String?
  firstName              String?
  lastName               String?
  name                   String
  phone                  String?
  address                String?
  preferredContactMethod String?   @default("phone")
  notes                  String?   @db.Text
  isActive               Boolean   @default(true)
  source                 String?   @default("MANUAL")
  needsReview            Boolean   @default(false)
  reviewedAt             DateTime?
  reviewedBy             String?
  mergedFrom             String[]
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  tenant              Tenant               @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  pets                Pet[]
  appointments        Appointment[]
  appointmentRequests AppointmentRequest[]
  reminders           Reminder[]
  sales               Sale[]
  user                User?                @relation(fields: [userId], references: [id])
  userId              String?

  @@index([tenantId])
  @@index([email])
  @@index([phone])
  @@index([tenantId, name])
  @@index([tenantId, needsReview])
  @@index([tenantId, source])
}

model Pet {
  id                 String              @id @default(uuid())
  tenantId           String
  customerId         String
  internalId         String?
  name               String
  species            String
  breed              String
  dateOfBirth        DateTime
  gender             String
  weight             Decimal?            @db.Decimal(6, 2)
  weightUnit         String?
  microchipNumber    String?
  isNeutered         Boolean             @default(false)
  isDeceased         Boolean             @default(false)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  appointments       Appointment[]
  medicalHistories   MedicalHistory[]
  medicalOrders      MedicalOrder[]
  tenant             Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  customer           Customer            @relation(fields: [customerId], references: [id], onDelete: Cascade)
  reminders          Reminder[]
  sales              Sale[]
  treatmentRecords   TreatmentRecord[]
  treatmentSchedules TreatmentSchedule[]

  @@index([tenantId, customerId])
  @@index([tenantId])
  @@index([customerId])
  @@index([name])
}

model MedicalHistory {
  id             String        @id @default(uuid())
  tenantId       String
  petId          String
  visitDate      DateTime
  reasonForVisit String        @db.Text
  diagnosis      String?       @db.Text
  treatment      String?       @db.Text
  notes          String?       @db.Text
  medicalOrderId String?       @unique
  staffId        String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  medicalOrder   MedicalOrder? @relation(fields: [medicalOrderId], references: [id])
  pet            Pet           @relation(fields: [petId], references: [id], onDelete: Cascade)
  staff          Staff?        @relation(fields: [staffId], references: [id])
  tenant         Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([petId])
  @@index([visitDate])
  @@index([medicalOrderId])
  @@index([staffId])
  @@index([tenantId, visitDate])
}

model TreatmentRecord {
  id                 String            @id @default(uuid())
  tenantId           String
  petId              String
  treatmentType      TreatmentType
  productName        String
  administrationDate DateTime
  batchNumber        String?
  manufacturer       String?
  staffId            String?
  notes              String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  vaccineStage       VaccinationStage?
  dewormingType      DewormingType?
  pet                Pet               @relation(fields: [petId], references: [id], onDelete: Cascade)
  staff              Staff?            @relation(fields: [staffId], references: [id])
  tenant             Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([petId, administrationDate])
  @@index([treatmentType])
  @@index([staffId])
}

model TreatmentSchedule {
  id            String            @id @default(uuid())
  tenantId      String
  petId         String
  treatmentType TreatmentType
  productName   String?
  scheduledDate DateTime
  status        TreatmentStatus   @default(SCHEDULED)
  reminderSent  Boolean           @default(false)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  vaccineStage  VaccinationStage?
  dewormingType DewormingType?
  pet           Pet               @relation(fields: [petId], references: [id], onDelete: Cascade)
  tenant        Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([petId, scheduledDate, status])
  @@index([status, scheduledDate])
  @@index([tenantId, status, scheduledDate])
}

model Appointment {
  id         String            @id @default(uuid())
  tenantId   String
  petId      String
  customerId String?
  staffId    String?
  userId     String?
  dateTime   DateTime
  duration   Int               @default(30)
  reason     String
  notes      String?           @db.Text
  status     AppointmentStatus @default(SCHEDULED)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt

  tenant   Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  pet      Pet       @relation(fields: [petId], references: [id], onDelete: Cascade)
  customer Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)
  staff    Staff?    @relation(fields: [staffId], references: [id])
  user     User?     @relation(fields: [userId], references: [id])

  @@index([tenantId])
  @@index([petId])
  @@index([customerId])
  @@index([staffId])
  @@index([userId])
  @@index([dateTime])
  @@index([status])
  @@index([tenantId, status, dateTime])
}

model Reminder {
  id         String         @id @default(uuid())
  tenantId   String
  petId      String?
  customerId String?
  userId     String?
  type       ReminderType
  title      String
  message    String
  dueDate    DateTime
  status     ReminderStatus @default(PENDING)
  sentAt     DateTime?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  tenant   Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  pet      Pet?      @relation(fields: [petId], references: [id], onDelete: Cascade)
  customer Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)
  user     User?     @relation(fields: [userId], references: [id])

  @@index([tenantId])
  @@index([petId])
  @@index([customerId])
  @@index([userId])
  @@index([dueDate])
  @@index([status])
  @@index([tenantId, status, dueDate])
}

model Staff {
  id                 String              @id @default(uuid())
  tenantId           String
  userId             String?             @unique
  name               String
  position           String
  email              String?             @unique
  phone              String?
  licenseNumber      String?
  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  appointments       Appointment[]
  inventoryMovements InventoryMovement[]
  medicalHistories   MedicalHistory[]
  medicalOrders      MedicalOrder[]
  Sale               Sale[]
  tenant             Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  treatmentRecords   TreatmentRecord[]

  @@index([tenantId])
  @@index([isActive])
  @@index([email])
  @@index([userId])
  @@index([tenantId, isActive])
}

model InventoryItem {
  id             String              @id @default(uuid())
  tenantId       String
  name           String
  category       InventoryCategory
  description    String?
  activeCompound String?
  presentation   String?
  measure        String?
  brand          String?
  quantity       Decimal             @default(0) @db.Decimal(8, 2)
  minStock       Decimal?            @db.Decimal(8, 2)
  location       String?
  expirationDate DateTime?
  status         InventoryStatus     @default(ACTIVE)
  batchNumber    String?
  specialNotes   String?
  cost           Decimal?            @db.Decimal(10, 2)
  price          Decimal?            @db.Decimal(10, 2)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  tenant         Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  movements      InventoryMovement[]
  prescriptions  Prescription[]
  saleItems      SaleItem[]

  @@index([tenantId])
  @@index([category])
  @@index([name])
  @@index([status])
  @@index([expirationDate])
  @@index([quantity])
  @@index([tenantId, status, quantity])
}

model InventoryMovement {
  id                String        @id @default(uuid())
  tenantId          String
  itemId            String
  type              MovementType
  quantity          Decimal       @db.Decimal(8, 2)
  date              DateTime      @default(now())
  reason            String?
  staffId           String?
  relatedRecordId   String?
  relatedRecordType String?
  notes             String?       @db.Text
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @default(now()) @updatedAt
  item              InventoryItem @relation(fields: [itemId], references: [id])
  staff             Staff?        @relation(fields: [staffId], references: [id])
  tenant            Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([itemId, date])
  @@index([staffId])
  @@index([type])
}

model MedicalOrder {
  id             String             @id @default(uuid())
  tenantId       String
  petId          String
  staffId        String
  visitDate      DateTime
  diagnosis      String?
  treatment      String?
  notes          String?
  status         MedicalOrderStatus @default(PENDING)
  saleId         String?            @unique
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  userId         String?
  medicalHistory MedicalHistory?
  pet            Pet                @relation(fields: [petId], references: [id], onDelete: Cascade)
  sale           Sale?              @relation(fields: [saleId], references: [id])
  staff          Staff              @relation(fields: [staffId], references: [id])
  tenant         Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  User           User?              @relation(fields: [userId], references: [id])
  prescriptions  Prescription[]

  @@index([tenantId])
  @@index([petId])
  @@index([staffId])
  @@index([status])
  @@index([saleId])
}

model Prescription {
  id           String        @id @default(uuid())
  orderId      String
  productId    String
  quantity     Decimal       @db.Decimal(8, 2)
  unitPrice    Decimal       @db.Decimal(10, 2)
  dosage       String?
  frequency    String?
  duration     String?
  instructions String?       @db.Text
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  order        MedicalOrder  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product      InventoryItem @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model CashDrawer {
  id               String            @id @default(uuid())
  tenantId         String
  openedAt         DateTime          @default(now())
  closedAt         DateTime?
  openedById       String?
  closedById       String?
  initialAmount    Decimal           @db.Decimal(10, 2)
  finalAmount      Decimal?          @db.Decimal(10, 2)
  expectedAmount   Decimal?          @db.Decimal(10, 2)
  difference       Decimal?          @db.Decimal(10, 2)
  status           DrawerStatus      @default(OPEN)
  notes            String?           @db.Text
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  closedBy         User?             @relation("CashDrawer_closedByToUser", fields: [closedById], references: [id], onDelete: SetNull)
  openedBy         User?             @relation("CashDrawer_openedByToUser", fields: [openedById], references: [id], onDelete: SetNull)
  tenant           Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  cashTransactions CashTransaction[]

  @@index([tenantId])
  @@index([openedAt])
  @@index([status])
  @@index([openedById])
  @@index([closedById])
  @@index([tenantId, status, openedAt])
}

model CashTransaction {
  id          String          @id @default(uuid())
  drawerId    String
  amount      Decimal         @db.Decimal(10, 2)
  type        TransactionType
  description String?
  relatedId   String?
  relatedType String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @default(now()) @updatedAt
  cashDrawer  CashDrawer      @relation(fields: [drawerId], references: [id], onDelete: Cascade)
  SalePayment SalePayment?

  @@index([drawerId])
  @@index([relatedId, relatedType])
  @@index([type])
}

model Sale {
  id         String     @id @default(uuid())
  tenantId   String
  customerId String?
  petId      String?
  userId     String?
  staffId    String?
  saleNumber String     @unique
  subtotal   Decimal    @db.Decimal(10, 2)
  tax        Decimal    @default(0) @db.Decimal(10, 2)
  discount   Decimal    @default(0) @db.Decimal(10, 2)
  total      Decimal    @db.Decimal(10, 2)
  status     SaleStatus @default(PENDING)
  notes      String?    @db.Text
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  tenant       Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  customer     Customer?     @relation(fields: [customerId], references: [id], onDelete: SetNull)
  pet          Pet?          @relation(fields: [petId], references: [id])
  user         User?         @relation(fields: [userId], references: [id])
  staff        Staff?        @relation(fields: [staffId], references: [id])
  items        SaleItem[]
  payments     SalePayment[]
  medicalOrder MedicalOrder?

  @@index([tenantId])
  @@index([customerId])
  @@index([petId])
  @@index([userId])
  @@index([staffId])
  @@index([saleNumber])
  @@index([status])
  @@index([createdAt])
  @@index([tenantId, status, createdAt])
}

model SaleItem {
  id            String         @id @default(uuid())
  saleId        String
  itemId        String?
  serviceId     String?
  description   String
  quantity      Decimal        @db.Decimal(8, 2)
  unitPrice     Decimal        @db.Decimal(10, 2)
  discount      Decimal        @default(0) @db.Decimal(10, 2)
  total         Decimal        @db.Decimal(10, 2)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  inventoryItem InventoryItem? @relation(fields: [itemId], references: [id], onDelete: SetNull)
  sale          Sale           @relation(fields: [saleId], references: [id], onDelete: Cascade)
  service       Service?       @relation(fields: [serviceId], references: [id], onDelete: SetNull)

  @@index([saleId])
  @@index([itemId])
  @@index([serviceId])
}

model SalePayment {
  id                String           @id @default(uuid())
  saleId            String
  paymentMethod     PaymentMethod
  amount            Decimal          @db.Decimal(10, 2)
  paymentDate       DateTime         @default(now())
  transactionId     String?
  notes             String?
  cashTransactionId String?          @unique
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @default(now()) @updatedAt
  cashTransaction   CashTransaction? @relation(fields: [cashTransactionId], references: [id])
  sale              Sale             @relation(fields: [saleId], references: [id], onDelete: Cascade)

  @@index([saleId])
  @@index([paymentMethod])
  @@index([paymentDate])
  @@index([cashTransactionId])
}

model Service {
  id          String          @id @default(uuid())
  tenantId    String
  name        String
  description String?
  category    ServiceCategory
  price       Decimal         @db.Decimal(10, 2)
  duration    Int?
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  saleItems   SaleItem[]
  tenant      Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([category])
  @@index([isActive])
  @@index([name])
  @@index([tenantId, isActive, category])
}

model TenantInvitation {
  id        String       @id @default(uuid())
  tenantId  String
  email     String
  roleKey   String
  token     String       @unique
  status    InviteStatus @default(PENDING)
  expiresAt DateTime
  createdAt DateTime     @default(now())
  tenant    Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([token])
  @@index([status, email])
}

model TenantSettings {
  id                   String          @id @default(uuid())
  tenantId             String          @unique
  timezone             String          @default("UTC")
  dateFormat           String          @default("DD/MM/YYYY")
  enableEmailReminders Boolean         @default(true)
  enableSmsReminders   Boolean         @default(false)
  taxRate              Decimal         @default(0) @db.Decimal(5, 4)
  currencyCode         String          @default("USD")
  currencySymbol       String          @default("$")
  appointmentDuration  Int             @default(30)
  defaultStartTime     String          @default("08:00")
  defaultEndTime       String          @default("18:00")
  defaultLunchStart    String?         @default("13:00")
  defaultLunchEnd      String?         @default("14:00")
  defaultSlotDuration  Int             @default(15)
  updatedAt            DateTime        @updatedAt
  tenant               Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  businessHours        BusinessHours[]
}

model BusinessHours {
  id               String         @id @default(uuid())
  tenantId         String
  tenantSettingsId String
  dayOfWeek        Int // 0 = Sunday, 1 = Monday, etc.
  isWorkingDay     Boolean        @default(true)
  startTime        String         @default("08:00")
  endTime          String         @default("18:00")
  lunchStart       String?        @default("13:00")
  lunchEnd         String?        @default("14:00")
  slotDuration     Int            @default(15)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  tenant           Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantSettings   TenantSettings @relation(fields: [tenantSettingsId], references: [id], onDelete: Cascade)

  @@unique([tenantId, dayOfWeek])
  @@index([tenantId])
  @@index([dayOfWeek])
}

model TenantSubscription {
  id                   String             @id @default(uuid())
  tenantId             String             @unique
  planId               String
  stripeSubscriptionId String?
  status               SubscriptionStatus @default(TRIALING)
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean            @default(false)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  plan                 Plan               @relation(fields: [planId], references: [id])
  tenant               Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model TenantApiKey {
  id        String    @id @default(uuid())
  tenantId  String
  name      String
  keyPrefix String
  keyHash   String    @unique
  lastUsed  DateTime?
  expiresAt DateTime?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  tenant    Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([isActive])
}

model TenantUsageStats {
  id                String   @id @default(uuid())
  tenantId          String   @unique
  totalUsers        Int      @default(0)
  totalPets         Int      @default(0)
  totalAppointments Int      @default(0)
  totalSales        Int      @default(0)
  storageUsedBytes  BigInt   @default(0)
  lastUpdated       DateTime @updatedAt
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

enum PlanType {
  PROFESIONAL
  CLINICA
  EMPRESA
}

enum TenantStatus {
  ACTIVE
  SUSPENDED
  CANCELLED
  PENDING_SETUP
}

enum InviteStatus {
  PENDING
  ACCEPTED
  EXPIRED
  REVOKED
}

enum SubscriptionStatus {
  ACTIVE
  TRIALING
  PAST_DUE
  CANCELED
  UNPAID
  INCOMPLETE
  INCOMPLETE_EXPIRED
  INACTIVE
}

enum TreatmentType {
  VACCINATION
  DEWORMING
  FLEA_TICK
  OTHER_PREVENTATIVE
}

enum TreatmentStatus {
  SCHEDULED
  COMPLETED
  OVERDUE
  CANCELLED
  SKIPPED
}

enum VaccinationStage {
  PUPPY_KITTEN
  ADULT
  SENIOR
  BOOSTER
}

enum DewormingType {
  INTERNAL
  EXTERNAL
  BOTH
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  CHECKED_IN
  IN_PROGRESS
  COMPLETED
  CANCELLED_CLIENT
  CANCELLED_CLINIC
  NO_SHOW
}

enum ReminderType {
  APPOINTMENT
  TREATMENT
  MEDICATION
  FOOD_REORDER
  CHECKUP
  BIRTHDAY
  OTHER
}

enum ReminderStatus {
  PENDING
  SENT
  ERROR
  DISMISSED
}

enum InventoryCategory {
  MEDICINE
  VACCINE
  DEWORMER
  FLEA_TICK_PREVENTION
  FOOD_PRESCRIPTION
  FOOD_REGULAR
  SUPPLEMENT
  ACCESSORY
  CONSUMABLE_CLINIC
  SURGICAL_MATERIAL
  LAB_SUPPLIES
  HYGIENE_GROOMING
  OTHER
}

enum InventoryStatus {
  ACTIVE
  INACTIVE
  LOW_STOCK
  OUT_OF_STOCK
  EXPIRED
  DISCONTINUED
}

enum MovementType {
  PURCHASE_IN
  SALE_OUT
  RETURN_IN
  ADJUSTMENT_IN
  ADJUSTMENT_OUT
  TRANSFER_IN
  TRANSFER_OUT
  EXPIRY_OUT
}

enum MedicalOrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum DrawerStatus {
  OPEN
  CLOSED
  RECONCILED
}

enum TransactionType {
  SALE_CASH
  REFUND_CASH
  DEPOSIT
  WITHDRAWAL
  ADJUSTMENT_IN
  ADJUSTMENT_OUT
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  MOBILE_PAYMENT
  CHECK
  INSURANCE
  OTHER
}

enum SaleStatus {
  PENDING
  PAID
  PARTIALLY_PAID
  COMPLETED
  CANCELLED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum ServiceCategory {
  CONSULTATION
  SURGERY
  VACCINATION
  DEWORMING
  PREVENTATIVE_CARE
  GROOMING
  BOARDING
  DENTAL_CARE
  LABORATORY_TEST
  IMAGING_RADIOLOGY
  HOSPITALIZATION
  EMERGENCY_CARE
  EUTHANASIA
  OTHER
}

// Add this model to track automations
model AutomationLog {
  id           String   @id @default(uuid())
  tenantId     String
  workflowType String // 'PET_WELCOME', 'VACCINATION_REMINDER', etc.
  triggeredBy  String // User ID who triggered
  payload      Json // Data sent to N8N
  status       String // 'SUCCESS', 'FAILED', 'PENDING'
  executionId  String? // N8N execution ID
  error        String? // Error message if failed
  createdAt    DateTime @default(now())

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([workflowType])
  @@index([status])
}

model AppointmentRequest {
  id            String                   @id @default(uuid())
  tenantId      String
  customerId    String
  petName       String
  service       String?
  preferredDate DateTime?
  preferredTime String?
  notes         String?                  @db.Text
  status        AppointmentRequestStatus @default(PENDING)
  source        String                   @default("PUBLIC_BOOKING")

  // Campos para seguimiento de identificación
  identificationStatus String? // 'existing', 'new', 'needs_review'
  similarCustomerIds   String[] // IDs de posibles duplicados
  reviewNotes          String?  @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant   Tenant   @relation(fields: [tenantId], references: [id])
  customer Customer @relation(fields: [customerId], references: [id])

  @@index([tenantId, status])
  @@index([tenantId, createdAt])
  @@index([tenantId, identificationStatus])
}

enum AppointmentRequestStatus {
  PENDING
  CONFIRMED
  REJECTED
  CANCELLED
  CONVERTED_TO_APPOINTMENT
}

/// -----------------------------------------------
/// Super Admin Setup Support
/// -----------------------------------------------

enum AdminAction {
  ASSIGNED
  REMOVED
  SETUP_COMPLETED
}

model AdminAuditLog {
  id           String      @id @default(uuid())
  action       AdminAction
  performedBy  String?
  targetUserId String
  targetEmail  String
  metadata     Json?
  createdAt    DateTime    @default(now())

  performedByUser User? @relation(fields: [performedBy], references: [id], onDelete: SetNull)

  @@index([action])
  @@index([targetUserId])
  @@index([createdAt])
}

model SetupToken {
  id        String    @id @default(uuid())
  token     String    @unique
  email     String
  expiresAt DateTime
  used      Boolean   @default(false)
  usedAt    DateTime?
  usedBy    String?
  createdAt DateTime  @default(now())

  usedByUser User? @relation(fields: [usedBy], references: [id])

  @@index([token])
  @@index([email])
}

model TrialAccessLog {
  id           String   @id @default(uuid())
  tenantId     String
  userId       String
  feature      String
  action       String
  allowed      Boolean
  denialReason String?
  requestPath  String?
  userAgent    String?
  ipAddress    String?
  createdAt    DateTime @default(now())

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([userId])
  @@index([feature])
  @@index([allowed])
  @@index([createdAt])
  @@index([tenantId, feature])
  @@index([tenantId, userId])
}
