#!/usr/bin/env node

/**
 * Script para verificar el estado de la suscripci√≥n
 * 
 * Este script consulta el endpoint /api/user/subscription para obtener
 * informaci√≥n detallada sobre el estado de la suscripci√≥n del usuario
 */

import dotenv from 'dotenv';
import fetch from 'node-fetch';

// Cargar variables de entorno
dotenv.config({ path: '.env.local' });

const BASE_URL = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000';

async function checkSubscriptionStatus() {
  console.log('üîç Verificando estado de suscripci√≥n...\n');
  
  try {
    // Nota: En un entorno real, necesitar√≠as autenticaci√≥n
    // Este script es para testing local
    const response = await fetch(`${BASE_URL}/api/user/subscription`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        // En un entorno real, necesitar√≠as incluir el token de autenticaci√≥n
        // 'Authorization': `Bearer ${token}`
      }
    });

    if (!response.ok) {
      if (response.status === 401) {
        console.log('‚ö†Ô∏è No autorizado - necesitas estar autenticado');
        console.log('üí° Ejecuta este script despu√©s de iniciar sesi√≥n en la aplicaci√≥n');
        return;
      }
      
      const errorText = await response.text();
      console.error('‚ùå Error en la respuesta:', response.status, errorText);
      return;
    }

    const data = await response.json();
    
    console.log('üìä Estado de la Suscripci√≥n:');
    console.log('================================');
    
    // Informaci√≥n del tenant
    console.log('\nüè¢ Tenant:');
    console.log(`  - ID: ${data.tenant.id}`);
    console.log(`  - Nombre: ${data.tenant.name}`);
    console.log(`  - Estado: ${data.tenant.status}`);
    
    // Informaci√≥n de la suscripci√≥n
    console.log('\nüí≥ Suscripci√≥n:');
    console.log(`  - Estado: ${data.subscription.status}`);
    console.log(`  - Plan: ${data.subscription.planName || 'No asignado'}`);
    console.log(`  - Es periodo de trial: ${data.subscription.isTrialPeriod ? 'S√≠' : 'No'}`);
    
    if (data.subscription.trialDaysRemaining !== null) {
      console.log(`  - D√≠as restantes de trial: ${data.subscription.trialDaysRemaining}`);
    }
    
    if (data.subscription.subscriptionDaysRemaining !== null) {
      console.log(`  - D√≠as restantes de suscripci√≥n: ${data.subscription.subscriptionDaysRemaining}`);
    }
    
    if (data.subscription.endsAt) {
      console.log(`  - Termina el: ${new Date(data.subscription.endsAt).toLocaleDateString('es-MX')}`);
    }
    
    if (data.subscription.trialEndsAt) {
      console.log(`  - Trial termina el: ${new Date(data.subscription.trialEndsAt).toLocaleDateString('es-MX')}`);
    }
    
    // Informaci√≥n de Stripe
    console.log('\nüîó Stripe:');
    console.log(`  - Customer ID: ${data.stripe.customerId || 'No asignado'}`);
    console.log(`  - Subscription ID: ${data.stripe.subscriptionId || 'No asignado'}`);
    console.log(`  - Product ID: ${data.stripe.productId || 'No asignado'}`);
    
    // Detalles adicionales de Stripe
    if (data.stripe.details) {
      console.log('\nüìã Detalles de Stripe:');
      console.log(`  - Status: ${data.stripe.details.status}`);
      console.log(`  - Periodo actual: ${new Date(data.stripe.details.currentPeriodStart).toLocaleDateString('es-MX')} - ${new Date(data.stripe.details.currentPeriodEnd).toLocaleDateString('es-MX')}`);
      
      if (data.stripe.details.trialStart && data.stripe.details.trialEnd) {
        console.log(`  - Trial: ${new Date(data.stripe.details.trialStart).toLocaleDateString('es-MX')} - ${new Date(data.stripe.details.trialEnd).toLocaleDateString('es-MX')}`);
      }
      
      console.log(`  - Cancelar al final del periodo: ${data.stripe.details.cancelAtPeriodEnd ? 'S√≠' : 'No'}`);
      
      if (data.stripe.details.canceledAt) {
        console.log(`  - Cancelado el: ${new Date(data.stripe.details.canceledAt).toLocaleDateString('es-MX')}`);
      }
      
      if (data.stripe.details.items && data.stripe.details.items.length > 0) {
        console.log('\nüì¶ Items de suscripci√≥n:');
        data.stripe.details.items.forEach((item, index) => {
          console.log(`  ${index + 1}. Price ID: ${item.priceId}`);
          console.log(`     Cantidad: ${item.quantity}`);
          console.log(`     Intervalo: ${item.interval} (${item.intervalCount})`);
        });
      }
    }
    
    // An√°lisis del estado
    console.log('\nüîç An√°lisis:');
    if (data.subscription.isTrialPeriod) {
      if (data.subscription.trialDaysRemaining > 0) {
        console.log(`  ‚úÖ Trial activo - ${data.subscription.trialDaysRemaining} d√≠as restantes`);
      } else {
        console.log('  ‚ö†Ô∏è Trial expirado - necesita renovar');
      }
    } else if (data.subscription.status === 'ACTIVE') {
      console.log('  ‚úÖ Suscripci√≥n activa');
    } else if (data.subscription.status === 'PAST_DUE') {
      console.log('  ‚ö†Ô∏è Pago vencido - necesita actualizar m√©todo de pago');
    } else if (data.subscription.status === 'CANCELED') {
      console.log('  ‚ùå Suscripci√≥n cancelada');
    } else {
      console.log(`  ‚ùì Estado desconocido: ${data.subscription.status}`);
    }
    
  } catch (error) {
    console.error('‚ùå Error al verificar estado:', error.message);
    
    if (error.code === 'ECONNREFUSED') {
      console.log('\nüí° Aseg√∫rate de que el servidor est√© ejecut√°ndose:');
      console.log('   pnpm dev');
    }
  }
}

// Funci√≥n para verificar m√∫ltiples tenants (para testing)
async function checkMultipleTenants() {
  console.log('üîç Verificando m√∫ltiples tenants...\n');
  
  // Esta funci√≥n requerir√≠a autenticaci√≥n y acceso a m√∫ltiples tenants
  // Por ahora, solo mostramos la estructura
  console.log('üí° Para verificar m√∫ltiples tenants:');
  console.log('   1. Necesitas autenticaci√≥n para cada tenant');
  console.log('   2. Puedes usar el endpoint con diferentes tokens de sesi√≥n');
  console.log('   3. O crear un endpoint admin para listar todos los tenants');
}

// Funci√≥n para simular diferentes estados
function showExpectedStates() {
  console.log('\nüìã Estados esperados para trials:');
  console.log('================================');
  
  const states = [
    {
      name: 'Trial Reci√©n Creado',
      subscription: {
        status: 'TRIALING',
        isTrialPeriod: true,
        trialDaysRemaining: 30,
        planName: 'Plan Profesional'
      }
    },
    {
      name: 'Trial por Terminar',
      subscription: {
        status: 'TRIALING',
        isTrialPeriod: true,
        trialDaysRemaining: 3,
        planName: 'Plan Profesional'
      }
    },
    {
      name: 'Suscripci√≥n Activa',
      subscription: {
        status: 'ACTIVE',
        isTrialPeriod: false,
        subscriptionDaysRemaining: 30,
        planName: 'Plan Profesional'
      }
    },
    {
      name: 'Pago Vencido',
      subscription: {
        status: 'PAST_DUE',
        isTrialPeriod: false,
        subscriptionDaysRemaining: -5,
        planName: 'Plan Profesional'
      }
    }
  ];
  
  states.forEach((state, index) => {
    console.log(`\n${index + 1}. ${state.name}:`);
    console.log(`   - Status: ${state.subscription.status}`);
    console.log(`   - Trial: ${state.subscription.isTrialPeriod ? 'S√≠' : 'No'}`);
    if (state.subscription.trialDaysRemaining) {
      console.log(`   - D√≠as trial: ${state.subscription.trialDaysRemaining}`);
    }
    if (state.subscription.subscriptionDaysRemaining) {
      console.log(`   - D√≠as suscripci√≥n: ${state.subscription.subscriptionDaysRemaining}`);
    }
    console.log(`   - Plan: ${state.subscription.planName}`);
  });
}

// Ejecutar la verificaci√≥n
async function main() {
  const args = process.argv.slice(2);
  
  if (args.includes('--help') || args.includes('-h')) {
    console.log('Uso: node check-subscription-status.mjs [opciones]');
    console.log('');
    console.log('Opciones:');
    console.log('  --help, -h     Mostrar esta ayuda');
    console.log('  --states       Mostrar estados esperados');
    console.log('  --multiple     Verificar m√∫ltiples tenants');
    console.log('');
    console.log('Ejemplos:');
    console.log('  node check-subscription-status.mjs');
    console.log('  node check-subscription-status.mjs --states');
    return;
  }
  
  if (args.includes('--states')) {
    showExpectedStates();
    return;
  }
  
  if (args.includes('--multiple')) {
    await checkMultipleTenants();
    return;
  }
  
  await checkSubscriptionStatus();
}

main()
  .then(() => {
    console.log('\n‚úÖ Verificaci√≥n completada');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\n‚ùå Error en la verificaci√≥n:', error);
    process.exit(1);
  }); 